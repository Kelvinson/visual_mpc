import numpy as np
from cvxpy import *

p_kinect = np.array([[-0.06545803,-0.02212466,0.5436304],
                    [0.09177855,0.0810922,0.64307974],
                    [-0.15671114, 0.09414098,0.6458577],
                    [-0.02928541, 0.05293937,0.61587682],
                    [-0.0059436,-0.04746571,0.52061012],
                    [0.13260846,0.04942381,0.61475251],
                    [0.11466606,0.16159481,0.71743966],
                    [-0.13723558,0.14170603,0.70165663],
                    [-0.01580598,0.02564658,0.58975293],
                    [0.07215122,0.0938911,0.65191601],
                    [-0.06739845,0.07779943,0.64305984],
                    [0.13571538,-0.04753684,0.52190186],
                    [-0.16423972,-0.0537553,0.50656584],
                    [-0.1137962,0.0152477,0.58465017],
                    [0.06989642,0.01688256,0.58053495],
                    [0.0655574,0.10204855,0.66012511],
                    [-0.09185597,0.10156762,0.66163122],
                    [-0.02258368,0.04432801,0.60710739]])
p_sawyer = np.array([[0.77156491,0.02959074,0.17979421],
                    [0.58012693,-0.18257699,0.17979987],
                    [0.54206722,0.17454165,0.18132207],
                    [0.6203167,-0.01048418,0.17945699],
                    [0.80031971,-0.04278028,0.17952735],
                    [0.64433289,-0.22958538,0.17828763],
                    [0.44476981,-0.17776769,0.179002],
                    [0.46707254,0.12819228,0.1883171],
                    [0.68611635,-0.02000254,0.1862336],
                    [0.56937211,-0.12975433,0.18785477],
                    [0.58714373,0.04742365,0.18306274],
                    [0.81539938,-0.21866526,0.17945956],
                    [0.82474542,0.17427405,0.17946764],
                    [0.70449639,0.09837992,0.18100293],
                    [0.70860437,-0.14221025,0.17703785],
                    [0.54964987,-0.12238416,0.176898],
                    [0.54396811,0.08585613,0.1779299],
                    [0.65824277,-0.00628727,0.1803491]])


H = Variable(3, 3)
t = Variable(3)

# Optimization constraints
constraints = []

# Optimization objective
temp = []
for i in range(p_sawyer.shape[0]):
        temp.append(norm(H * p_kinect[i] + t - p_sawyer[i]))
objective = Minimize(sum(temp))

# Solve optimization problem
prob = Problem(objective, constraints)
prob.solve()

print("H:\n", H.value)
print("t:\n", t.value)

np.save("H_kinect", H.value)
np.save("t_kinect", t.value)

H_lcam = np.load('H_kinect.npy')
t_lcam = np.load('t_kinect.npy')

error = 0
for p_l, p_s in zip(p_kinect, p_sawyer):
    pred_s = H_lcam.dot(p_l.reshape((-1, 1))) + t_lcam.reshape((-1, 1))

    point_error = np.linalg.norm(pred_s.reshape(-1) - p_s)
    print('p_error', np.sqrt(point_error))
    print('pred_s: {} \t real_s: {}'.format(pred_s.reshape(-1), p_s.reshape(-1)))
    error += point_error
print('total_error', np.sqrt(error))